/* Generated By:JJTree&JavaCC: Do not edit this line. compiladoraula.java */
package parser;
import recovery.*;

public class compiladoraula/*@bgen(jjtree)*/implements compiladoraulaTreeConstants, compiladoraulaConstants {/*@bgen(jjtree)*/
  protected static JJTcompiladoraulaState jjtree = new JJTcompiladoraulaState();
        public static void main(String args []) throws ParseException
        {
           compiladoraula parser = new compiladoraula(System.in);//introduzir dados do teclado
           System.out.println("Compilador Guitarra");
           System.out.println("==========================");


           SimpleNode n = compiladoraula.main();
           n.dump("");
           try
           {

           }
           catch(Error e)
           {
              System.out.println(e.getMessage());
              System.out.println("se encontrou erro");
           }
        }
        static public String im(int x)
        {
            int k;
                String s;
            s = tokenImage[x];
            k = s.lastIndexOf("\u005c"");
            try {
              s = s.substring(1,k);
         }
         catch (StringIndexOutOfBoundsException e)
                   {}
           return s;
         }

         static Token lastError = null;
         static boolean eof;    // variável que indica se EOF foi alcançado

         // o método abaixo consome tokens até alcançar um que pertença ao conjunto
         // de sincronização
         static void consumeUntil(RecoverySet g,
                                 ParseException e,
                                 String met) throws ParseEOFException,
                                                    ParseException
         {
                Token tok;
                System.out.println();
                System.out.println("*** " + met + " ***");
                System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

                if (g == null) throw e; // se o conjunto é null, propaga a exceção

                tok = getToken(1); // pega token corrente
                while ( ! eof ) { // se não chegou ao fim do arquivo
                  if ( g.contains(tok.kind)) {//achou um token no conjunto
                    System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                                       im(tok.kind));
                    break;
                  }
                  System.out.println("     Ignorando o token: " + im(tok.kind));
                  getNextToken();     // pega próximo token       
              tok = getToken(1);
                  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
                      eof = true;
          }
            if ( tok != lastError)  {
                  System.out.println(e.getMessage());
                  lastError = tok;

          }
          if ( eof )
                  throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
          }

  static final public SimpleNode main() throws ParseException {
 /*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INICIOPROGRAMA);
      id();
      jj_consume_token(ABRE);
      label_1:
      while (true) {
        sentencas();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIPOINTEIRO:
        case TIPOBINARIO:
        case TIPOFRASE:
        case TIPOREAL:
        case ESCREVER:
        case LER:
        case SE:
        case SELECIONA:
        case PARA:
        case FACA:
        case ENQUANTO:
        case ID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(FECHA);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void id() throws ParseException {
             /*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void sentencas() throws ParseException {
                   /*@bgen(jjtree) sentencas */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOBINARIO:
      case TIPOFRASE:
      case TIPOREAL:
        declaracaoVariavel();
        break;
      case ESCREVER:
        funcaoEscrever();
        break;
      case LER:
        funcaoLer();
        break;
      case ID:
        funcaoAtribuicao();
        break;
      case SE:
        funcaoSE();
        break;
      case SELECIONA:
        funcaoSelecione();
        break;
      case PARA:
        funcaoPara();
        break;
      case ENQUANTO:
        funcaoEnquanto();
        break;
      case FACA:
        funcaoFaca();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void declaracaoVariavel() throws ParseException {
 /*@bgen(jjtree) declaracaoVariavel */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.declaracaoVariavel;
    try {
      try {
        tipoDado();
        id();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
          jj_consume_token(IGUAL);
          valor();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                consumeUntil(sincronizacao, e, "declaracaoVariavel");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void tipoDado() throws ParseException {
                   /*@bgen(jjtree) tipoDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPOINTEIRO:
        jj_consume_token(TIPOINTEIRO);
        break;
      case TIPOBINARIO:
        jj_consume_token(TIPOBINARIO);
        break;
      case TIPOFRASE:
        jj_consume_token(TIPOFRASE);
        break;
      case TIPOREAL:
        jj_consume_token(TIPOREAL);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void valor() throws ParseException {
               /*@bgen(jjtree) valor */
  SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALOR_CADEIA:
        jj_consume_token(VALOR_CADEIA);
        break;
      case VALOR_INTEIRO:
        jj_consume_token(VALOR_INTEIRO);
        break;
      case VALOR_REAL:
        jj_consume_token(VALOR_REAL);
        break;
      case ID:
        id();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcaoEscrever() throws ParseException {
 /*@bgen(jjtree) funcaoEscrever */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOESCREVER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.funcaoEscrever;
    try {
      try {
        jj_consume_token(ESCREVER);
        jj_consume_token(ABRECHAVES);
        valor();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SOMA:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_2;
          }
          jj_consume_token(SOMA);
          valor();
        }
        jj_consume_token(FECHAVES);
      } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "funcaoEscrever");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void funcaoLer() throws ParseException {
 /*@bgen(jjtree) funcaoLer */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOLER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.funcaoLer;
    try {
      try {
        jj_consume_token(LER);
        jj_consume_token(ABRECHAVES);
        id();
        jj_consume_token(FECHAVES);
      } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "funcaoLer");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void funcaoAtribuicao() throws ParseException {
 /*@bgen(jjtree) funcaoAtribuicao */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOATRIBUICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.funcaoAtribuicao;
    try {
      try {
        id();
        jj_consume_token(IGUAL);
        operadorSimples();
      } catch (ParseException e) {
          consumeUntil(sincronizacao, e, "funcaoAtribuicao");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void operadorSimples() throws ParseException {
                         /*@bgen(jjtree) operadorSimples */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORSIMPLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case VALOR_INTEIRO:
      case VALOR_REAL:
      case VALOR_CADEIA:
        valor();
        break;
      case ABRECHAVES:
        operadorParenteses();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOMA:
        case SUBTRAIR:
        case MULTI:
        case DIVI:
        case MOD:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        operadorAritmetico();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case VALOR_INTEIRO:
        case VALOR_REAL:
        case VALOR_CADEIA:
          valor();
          break;
        case ABRECHAVES:
          operadorParenteses();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operadorParenteses() throws ParseException {
                            /*@bgen(jjtree) operadorParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABRECHAVES);
      operadorSimples();
      jj_consume_token(FECHAVES);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operadorAritmetico() throws ParseException {
                            /*@bgen(jjtree) operadorAritmetico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORARITMETICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        jj_consume_token(SOMA);
        break;
      case SUBTRAIR:
        jj_consume_token(SUBTRAIR);
        break;
      case MULTI:
        jj_consume_token(MULTI);
        break;
      case DIVI:
        jj_consume_token(DIVI);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcaoSE() throws ParseException {
 /*@bgen(jjtree) funcaoSE */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.funcaoSE;
    try {
      try {
        jj_consume_token(SE);
        condicao();
        jj_consume_token(PONTOS);
        label_4:
        while (true) {
          sentencas();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TIPOINTEIRO:
          case TIPOBINARIO:
          case TIPOFRASE:
          case TIPOREAL:
          case ESCREVER:
          case LER:
          case SE:
          case SELECIONA:
          case PARA:
          case FACA:
          case ENQUANTO:
          case ID:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_4;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SENAO:
          jj_consume_token(SENAO);
          label_5:
          while (true) {
            sentencas();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TIPOINTEIRO:
            case TIPOBINARIO:
            case TIPOFRASE:
            case TIPOREAL:
            case ESCREVER:
            case LER:
            case SE:
            case SELECIONA:
            case PARA:
            case FACA:
            case ENQUANTO:
            case ID:
              ;
              break;
            default:
              jj_la1[11] = jj_gen;
              break label_5;
            }
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        jj_consume_token(FIMBLOCO);
      } catch (ParseException e) {
          consumeUntil(sincronizacao, e, "funcaoSE");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void condicao() throws ParseException {
                  /*@bgen(jjtree) condicao */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      condicaoSimples();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OU:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        opLogico();
        condicaoSimples();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void condicaoSimples() throws ParseException {
                         /*@bgen(jjtree) condicaoSimples */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICAOSIMPLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      valor();
      opRelacional();
      valor();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void opLogico() throws ParseException {
                  /*@bgen(jjtree) opLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case OU:
        jj_consume_token(OU);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void opRelacional() throws ParseException {
                      /*@bgen(jjtree) opRelacional */
  SimpleNode jjtn000 = new SimpleNode(JJTOPRELACIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIOR:
        jj_consume_token(MAIOR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
          jj_consume_token(IGUAL);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case MENOR:
        jj_consume_token(MENOR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
          jj_consume_token(IGUAL);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
        jj_consume_token(IGUAL);
        break;
      case NAO:
        jj_consume_token(NAO);
        jj_consume_token(IGUAL);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcaoSelecione() throws ParseException {
 /*@bgen(jjtree) funcaoSelecione */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOSELECIONE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.funcaoSelecione;
    try {
      try {
        jj_consume_token(SELECIONA);
        jj_consume_token(ABRECHAVES);
        id();
        jj_consume_token(FECHAVES);
        label_7:
        while (true) {
          jj_consume_token(CASO);
          jj_consume_token(VALOR_INTEIRO);
          jj_consume_token(PONTOS);
          sentencas();
          jj_consume_token(BREAK);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CASO:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_7;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEFAULTT:
          jj_consume_token(DEFAULTT);
          jj_consume_token(PONTOS);
          sentencas();
          jj_consume_token(BREAK);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        jj_consume_token(FIMBLOCO);
        jj_consume_token(SELECIONA);
      } catch (ParseException e) {
                consumeUntil(sincronizacao, e, "funcaoSelecione");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void funcaoPara() throws ParseException {
 /*@bgen(jjtree) funcaoPara */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOPARA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.funcaoPara;
    try {
      try {
        jj_consume_token(PARA);
        id();
        jj_consume_token(IGUAL);
        jj_consume_token(VALOR_INTEIRO);
        jj_consume_token(IN);
        jj_consume_token(VALOR_INTEIRO);
        label_8:
        while (true) {
          sentencas();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TIPOINTEIRO:
          case TIPOBINARIO:
          case TIPOFRASE:
          case TIPOREAL:
          case ESCREVER:
          case LER:
          case SE:
          case SELECIONA:
          case PARA:
          case FACA:
          case ENQUANTO:
          case ID:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_8;
          }
        }
        jj_consume_token(SEGUINTE);
      } catch (ParseException e) {
            consumeUntil(sincronizacao, e, "funcaoPara");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void funcaoEnquanto() throws ParseException {
 /*@bgen(jjtree) funcaoEnquanto */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOENQUANTO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.funcaoEnquanto;
    try {
      try {
        jj_consume_token(ENQUANTO);
        condicao();
        jj_consume_token(PONTOS);
        label_9:
        while (true) {
          sentencas();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TIPOINTEIRO:
          case TIPOBINARIO:
          case TIPOFRASE:
          case TIPOREAL:
          case ESCREVER:
          case LER:
          case SE:
          case SELECIONA:
          case PARA:
          case FACA:
          case ENQUANTO:
          case ID:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_9;
          }
        }
        jj_consume_token(FIMBLOCO);
        jj_consume_token(ENQUANTO);
      } catch (ParseException e) {
          consumeUntil(sincronizacao, e, "funcaoEnquanto");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void funcaoFaca() throws ParseException {
 /*@bgen(jjtree) funcaoFaca */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOFACA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.funcaoFaca;
    try {
      try {
        jj_consume_token(FACA);
        jj_consume_token(PONTOS);
        label_10:
        while (true) {
          sentencas();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TIPOINTEIRO:
          case TIPOBINARIO:
          case TIPOFRASE:
          case TIPOREAL:
          case ESCREVER:
          case LER:
          case SE:
          case SELECIONA:
          case PARA:
          case FACA:
          case ENQUANTO:
          case ID:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_10;
          }
        }
        jj_consume_token(FIMBLOCO);
        jj_consume_token(ENQUANTO);
        condicao();
        jj_consume_token(FIMBLOCO);
        jj_consume_token(FACA);
      } catch (ParseException e) {
                consumeUntil(sincronizacao, e, "funcaoFaca");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compiladoraulaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x322ef000,0x322ef000,0x0,0xf000,0x0,0x40000000,0x0,0xc0000000,0x0,0xc0000000,0x322ef000,0x322ef000,0x100000,0x0,0x0,0x0,0x0,0x0,0x400000,0x800000,0x322ef000,0x322ef000,0x322ef000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20000,0x20000,0x40,0x0,0x1e0000,0x0,0x1e0400,0x7,0x1e0400,0x7,0x20000,0x20000,0x0,0x180,0x180,0x40,0x40,0x270,0x0,0x0,0x20000,0x20000,0x20000,};
   }

  /** Constructor with InputStream. */
  public compiladoraula(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public compiladoraula(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compiladoraulaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public compiladoraula(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compiladoraulaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public compiladoraula(compiladoraulaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compiladoraulaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
