package recovery;

import parser.*;

public class First { //implementa os conjuntos first p/ alguns n.terminais

    static public final RecoverySet main = new RecoverySet();
    static public final RecoverySet id = new RecoverySet();
    static public final RecoverySet declaracaoVariavel = new RecoverySet();
    static public final RecoverySet funcaoEscrever = new RecoverySet();
    static public final RecoverySet funcaoLer = new RecoverySet();
    static public final RecoverySet funcaoAtribuicao = new RecoverySet();
    static public final RecoverySet operadorSimples = new RecoverySet();
    static public final RecoverySet funcaoSE = new RecoverySet();
    static public final RecoverySet funcaoSelecione = new RecoverySet();
    static public final RecoverySet funcaoPara = new RecoverySet();
    static public final RecoverySet funcaoEnquanto = new RecoverySet();
    static public final RecoverySet funcaoFaca = new RecoverySet();
    
    static {
    	main.add(new Integer(compiladoraulaConstants.EOF));
    	id.add(new Integer(compiladoraulaConstants.ABRE));
    	declaracaoVariavel.add(new Integer(compiladoraulaConstants.FECHA));
    	declaracaoVariavel.add(new Integer(compiladoraulaConstants.TIPOINTEIRO));
    	declaracaoVariavel.add(new Integer(compiladoraulaConstants.TIPOBINARIO));
    	declaracaoVariavel.add(new Integer(compiladoraulaConstants.TIPOFRASE));
    	declaracaoVariavel.add(new Integer(compiladoraulaConstants.TIPOREAL));
    	declaracaoVariavel.add(new Integer(compiladoraulaConstants.TIPOREAL));
    	funcaoEscrever.add(new Integer(compiladoraulaConstants.ESCREVER));
    	funcaoEscrever.add(new Integer(compiladoraulaConstants.ABRECHAVES));
    	funcaoEscrever.add(new Integer(compiladoraulaConstants.VALOR_CADEIA));
    	funcaoEscrever.add(new Integer(compiladoraulaConstants.VALOR_INTEIRO));
    	funcaoEscrever.add(new Integer(compiladoraulaConstants.VALOR_REAL));
    	funcaoEscrever.add(new Integer(compiladoraulaConstants.ID));
    	funcaoEscrever.add(new Integer(compiladoraulaConstants.SOMA));
    	funcaoEscrever.add(new Integer(compiladoraulaConstants.FECHAVES));
    	funcaoLer.add(new Integer(compiladoraulaConstants.LER));
    	funcaoLer.add(new Integer(compiladoraulaConstants.ABRECHAVES));
    	funcaoLer.add(new Integer(compiladoraulaConstants.ID));
    	funcaoLer.add(new Integer(compiladoraulaConstants.FECHAVES));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.ID));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.IGUAL));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.VALOR_CADEIA));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.VALOR_INTEIRO));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.VALOR_REAL));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.ABRECHAVES));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.SOMA));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.SUBTRAIR));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.MULTI));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.DIVI));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.MOD));
    	funcaoAtribuicao.add(new Integer(compiladoraulaConstants.FECHAVES));
    	funcaoSE.add(new Integer(compiladoraulaConstants.SE));
    	funcaoSE.add(new Integer(compiladoraulaConstants.PONTOS));
    	funcaoSE.add(new Integer(compiladoraulaConstants.VALOR_CADEIA));
    	funcaoSE.add(new Integer(compiladoraulaConstants.VALOR_INTEIRO));
    	funcaoSE.add(new Integer(compiladoraulaConstants.VALOR_REAL));
    	funcaoSE.add(new Integer(compiladoraulaConstants.MAIOR));
    	funcaoSE.add(new Integer(compiladoraulaConstants.IGUAL));
    	funcaoSE.add(new Integer(compiladoraulaConstants.MENOR));
    	funcaoSE.add(new Integer(compiladoraulaConstants.NAO));
    	funcaoSE.add(new Integer(compiladoraulaConstants.AND));
    	funcaoSE.add(new Integer(compiladoraulaConstants.OU));
    	funcaoSE.add(new Integer(compiladoraulaConstants.SENAO));
    	funcaoSE.add(new Integer(compiladoraulaConstants.FIMBLOCO));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.SELECIONA));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.ABRECHAVES));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.ID));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.FECHAVES));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.CASO));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.VALOR_INTEIRO));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.PONTOS));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.BREAK));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.DEFAULTT));
    	funcaoSelecione.add(new Integer(compiladoraulaConstants.FIMBLOCO));
    	funcaoPara.add(new Integer(compiladoraulaConstants.PARA));
    	funcaoPara.add(new Integer(compiladoraulaConstants.ID));
    	funcaoPara.add(new Integer(compiladoraulaConstants.IGUAL));
    	funcaoPara.add(new Integer(compiladoraulaConstants.VALOR_INTEIRO));
    	funcaoPara.add(new Integer(compiladoraulaConstants.IN));
    	funcaoPara.add(new Integer(compiladoraulaConstants.SEGUINTE));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.ENQUANTO));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.VALOR_CADEIA));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.VALOR_INTEIRO));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.VALOR_REAL));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.MAIOR));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.IGUAL));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.MENOR));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.NAO));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.AND));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.OU));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.PONTOS));
    	funcaoEnquanto.add(new Integer(compiladoraulaConstants.FIMBLOCO));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.FACA));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.PONTOS));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.FIMBLOCO));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.ENQUANTO));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.VALOR_CADEIA));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.VALOR_INTEIRO));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.VALOR_REAL));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.MAIOR));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.IGUAL));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.MENOR));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.NAO));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.AND));
    	funcaoFaca.add(new Integer(compiladoraulaConstants.OU));
    }
}
